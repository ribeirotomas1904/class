// Basic Exercises involving Bools

type Bool {
  true
  false
}

// Is true
// Returns true if input is true
is_true(a: Bool): Bool
  a

// Is false
// Returns true if input is false
is_false(a: Bool): Bool
  case a {
    false: Bool.true
  } default Bool.false

// Negation
// Returns the opposite of a Bool
neg(b: Bool): Bool 
  case b {
    true: Bool.false
    false: Bool.true
  }

// And
// Returns true if both inputs are true
and(a: Bool, b: Bool): Bool
  case a b {
    true true: Bool.true
  } default Bool.false

// Or
// Returs true if any input is true
or(a: Bool, b: Bool): Bool
  case a b {
    false false: Bool.false
  } default Bool.true

or(a: Bool, b: Bool): Bool
  let neg_a = neg(a)
  let neg_b = neg(b)
  let neg_a_and_neg_b = and(neg_a, neg_b)
  neg(neg_a_and_neg_b)

// Equal
// Returs true if both inputs are identical
eql(a: Bool, b: Bool): Bool
  case a b {
    true true: Bool.true
    false false: Bool.true
  } default Bool.false

// Xor
// Returns true if both inputs are different
xor(a: Bool, b: Bool): Bool
  case a b {
    true false: Bool.true
    false true: Bool.true
  } default Bool.false

xor(a: Bool, b: Bool): Bool
  let neg_a = neg(a)
  let neg_b = neg(b)
  let a_and_neg_b = and(a, neg_b)
  let neg_a_and_b = and(neg_a, b)
  or(a_and_neg_b, neg_a_and_b)

// Nor
// Returns true if both inputs are false
nor(a: Bool, b: Bool): Bool
  case a b {
    false false: Bool.true
  } default Bool.false

nor(a: Bool, b: Bool): Bool
  neg(or(a, b))

// Nand
// Returns false only if both inputs are true
nand(a: Bool, b: Bool): Bool
  case a b {
    true true: Bool.false
  } default Bool.true

nand(a: Bool, b: Bool): Bool
  neg(and(a, b))

// Xnor
// Returns true if both inputs are identical
xnor(a: Bool, b: Bool): Bool
  neg(xor(a, b))
